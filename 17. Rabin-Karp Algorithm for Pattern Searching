https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/
TC - O(m*n)

To find first occurrences
#define ll long long
const ll MOD=1e9+7;
class Solution {
public:
    //func to calculate hash value
    ll hashValue(string str, ll RADIX, ll m){
        ll ans = 0;
        ll factor = 1;
        //traverse from last
        for(ll i=m-1; i>=0; i--){
            ans += ((str[i]-'a')*factor)%MOD;
            //update factor
            factor = (factor * RADIX)%MOD;
        }
        return ans%MOD;
    }

    int strStr(string haystack, string needle) {
        ll n = haystack.length();
        ll m = needle.length();
        if(n<m) return -1;

        ll RADIX = 26;
        ll max_weight = 1;
        for(ll i=1; i<=m; i++){
            max_weight = (max_weight*RADIX) % MOD;
        }

        ll hashNeedle = hashValue(needle, RADIX, m);
        ll hashHay = 0;

        for(ll i=0; i<=n-m; i++){
            if(i==0){
                hashHay = hashValue(haystack, RADIX, m);
            }
            else{
                //remove (i-1) & add (i-m+1)
                hashHay = ((hashHay*RADIX)%MOD - ((haystack[i-1]-'a') * max_weight) % MOD + 
                (haystack[i+m-1]-'a') + MOD) % MOD;
            }
            //check hash values of both
            if(hashNeedle == hashHay){
                for(ll j=0; j<m; j++){
                    if(needle[j]!=haystack[j+i]) break;
                    if(j==m-1){
                        return i;
                    }
                }
            }
        }
        return -1;
    }
};


To find multiple occurrences
#include <bits/stdc++.h>

using namespace std;

void rabinKarpAlgo(string & pattern, string & text, int q) {

  int m = pattern.size();
  int n = text.size();
  int i, j, hash_p = 0, hash_t = 0, h = 1, d = m + n;

  for (i = 0; i < m - 1; i++) {
    h = (h * d) % q;
  }

  // Calculate hash value for pattern and text
  for (i = 0; i < m; i++) {
    hash_p = (pattern[i] + d * hash_p) % q;
    hash_t = (text[i] + d * hash_t) % q;
  }

  // Find the match
  for (i = 0; i <= n - m; i++) {

    // Check the hash values of current windows of text and pattern.
    if (hash_p == hash_t) {

      for (j = 0; j < m; j++) {

        if (text[i + j] != pattern[j]) break;
      }

      // if pattern == text
      if (j == m) cout << "Pattern is found at index : " << i << "\n";
    }

    // Calculate the hash value for next window : adding trailing digit 
   //and remove leading digit
    if (i < n - m) {
      hash_t = (d * (hash_t - text[i] * h) + text[i + m]) % q;

      //converting negative value of hash_t to positive.
      if (hash_t < 0) hash_t = (hash_t + q);
    }
  }
}

int main() {
  string text = "GEEKS FOR GEEKS";
  string pattern = "GEEK";
  int q = 101;
  rabinKarpAlgo(pattern, text, q);
}
