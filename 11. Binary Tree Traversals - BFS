Level Order Traversal visits all nodes present in the same level completely before visiting the next level

// Define a tree node structure
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : value(x), left(nullptr), right(nullptr) {}
};

// Function to perform level order traversal
void levelOrderTraversal(TreeNode* root) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();
        cout << node->value << " ";
        TreeNode* left = node->left;
        TreeNode* right = node->right;
        if (left != NULL) q.push(left);
        if (right != NULL) q.push(right);
    }
}

int main() {
    // Example usage
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(6);

    cout << "Level Order Traversal: ";
    levelOrderTraversal(root);
    return 0;
}
Level Order Traversal: 1 2 3 4 5 6 
