https://www.geeksforgeeks.org/problems/disjoint-set-union-find/0

int find(vector<int>& Parent,int x)
{
    if(x == Parent[x]){
        return x;
    }
    return Parent[x] = find(Parent, Parent[x]);
}
void unionSet(vector<int>Parent, int X, int Y)
{
   int x_parent = find(Parent, X);
   int y_parent = find(Parent, Y);
   if(x_parent != y_parent){   //kisi ko kisi ka parent bna do
       Parent[x_parent] = y_parent;
   }
}

-------------------------------------------Disjoint Set Union By Rank and Path Compression--------------------------------------
int find(vector<int> A,int x)
{
    if(x == A[x]){
        return x;
    }
    return A[x] = find(A, A[x]);
}
void unionSet(vector<int> A,int x,int y)
{   
   vector<int> rank(A.size(), 0);
   int x_parent = find(A, x);
   int y_parent = find(A, y);
   if(x_parent == y_parent){   
       return;
   }
   else if(rank[x_parent] > rank[y_parent]){
       A[x_parent] = y_parent;
   }
   else if(rank[x_parent] < rank[y_parent]){
       A[y_parent] = x_parent;
   }
   else{
        A[y_parent] = x_parent;
   }
}
